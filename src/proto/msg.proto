// Spin RPC library, copyright 2015-2017 Georg Brandl.

//! Protocol buffers: definition of message format sent over 0MQ.

syntax = "proto2";

package spin_proto;

enum DataType {
    void   = 0;
    bool   = 1;
    double = 2;
    float  = 3;
    int32  = 4;
    int64  = 5;
    uint32 = 6;
    uint64 = 7;
    string = 8;
    byte_array   = 10;
    bool_array	= 11;
    double_array = 12;
    float_array	= 13;
    int32_array	= 14;
    int64_array	= 15;
    uint32_array = 16;
    uint64_array = 17;
    string_array = 18;
    int64_string_array  = 21;
    double_string_array = 22;
}

message Value {
    required DataType vtype   = 10;
    repeated bool     bool    = 1 [packed=true];
    repeated double   double  = 2 [packed=true];
    repeated float    float   = 3 [packed=true];
    repeated sint32   int32   = 4 [packed=true];
    repeated sint64   int64   = 5 [packed=true];
    repeated uint32   uint32  = 6 [packed=true];
    repeated uint64   uint64  = 7 [packed=true];
    repeated string   string  = 8;
    optional bytes    bytes   = 9;
}

message Error {
    required string reason = 1;
    required string desc = 2;
    required string origin = 3;
}

////////////////////////////////////////////////////////////////////////////////

message CmdDesc {
    required string   name = 1;
    required string   doc = 2;
    required DataType intype = 3;
    required DataType outtype = 4;
    required string   indoc = 5;
    required string   outdoc = 6;
}

message AttrDesc {
    required string   name = 1;
    required string   doc = 2;
    required DataType type = 3;
    required string   unit = 4;
}

message PropDesc {
    required string   name = 1;
    required string   doc = 2;
    required DataType type = 3;
    optional Value    default = 4;
}

////////////////////////////////////////////////////////////////////////////////

enum ReqType {
    ping = 0;
    exec_cmd = 1;
    read_attr = 2;
    write_attr = 3;
    get_prop = 4;
    set_prop = 5;
    query_api = 10;
}

message Request {
    required uint32  seqno = 1;
    required ReqType rtype = 2;
    optional string  name = 3;
    optional Value   value = 4;
}

enum RespType {
    ok = 0;
    error = 1;
    value = 2;
    api = 3;
}

message Response {
    required uint32   seqno = 1;
    required RespType rtype = 2;
    optional Error    error = 3;
    optional Value    value = 5;
    repeated CmdDesc  cmds = 6;
    repeated AttrDesc attrs = 7;
    repeated PropDesc props = 8;
}
